// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email      String     @unique
  password   String
  image      String?
  role       Role       @default(user)
  accounts   Account[]
  savings    Saving[]
  incomes    Income[]
  expenses   Expense[]
  budgets    Budget[]
  cards      Card[]
  categories Category[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Saving {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  goal        Float
  startDate   DateTime
  endDate     DateTime
  incomes     Income[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id") @db.ObjectId
}

model Income {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  date      DateTime
  amount    Float
  source    String
  savingId  String?   @map("saving_id") @db.ObjectId
  saving    Saving?   @relation(fields: [savingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.ObjectId
}

model Expense {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  amount     Float
  date       DateTime
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id") @db.ObjectId
  budget     Budget?  @relation(fields: [budgetId], references: [id])
  budgetId   String?  @map("budget_id") @db.ObjectId
}

model Budget {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  amount     Float
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @map("category_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id") @db.ObjectId
  expenses   Expense[]
}

model Card {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  number String
  expiry DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId String   @map("user_id") @db.ObjectId
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  icon    String?
  budget  Budget[]
  expense Expense[]
  user    User?     @relation(fields: [userId], references: [id])
  userId  String?   @map("user_id") @db.ObjectId
}
